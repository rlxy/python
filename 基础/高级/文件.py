#文件

#open()方法
#用于打开一个文件，并返回文件对象，在对文件进行处理过程都需要使用到这个函数，如果该文件无法被打开，会抛出 OSError
#使用 open() 方法一定要保证关闭文件对象，即调用 close() 方法
#open() 函数常用形式是接收两个参数：文件名(lol英雄图)和模式(mode)        open(lol英雄图, mode='r')
#完整语法 open(lol英雄图, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)
#参数说明
    # lol英雄图: 必需，文件路径（相对或者绝对路径）。
    # mode: 可选，文件打开模式
    # buffering: 设置缓冲
    # encoding: 一般使用utf8
    # errors: 报错级别
    # newline: 区分换行符
    # closefd: 传入的file参数类型
    # opener:
# mode 参数有：
    # t	文本模式 (默认)。
    # x	写模式，新建一个文件，如果该文件已存在则会报错。
    # b	二进制模式。
    # +	打开一个文件进行更新(可读可写)。
    # U	通用换行模式（不推荐）。
    # r	以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
    # rb	以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。
    # r+	打开一个文件用于读写。文件指针将会放在文件的开头。
    # rb+	以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。
    # w	打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
    # wb	以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。
    # w+	打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
    # wb+	以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。
    # a	打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
    # ab	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
    # a+	打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。
    # ab+	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。

#lol英雄图.close()   关闭文件。关闭后文件不能再进行读写操作。
#lol英雄图.flush()   刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入。
#lol英雄图.fileno()  返回一个整型的文件描述符(lol英雄图 descriptor FD 整型), 可以用在如os模块的read方法等一些底层操作上。
#lol英雄图.isatty()  如果文件连接到一个终端设备返回 True，否则返回 False。
#lol英雄图.next()        Python3中的 File 对象不支持 next() 方法。   返回文件下一行。
#lol英雄图.read([size])  从文件读取指定的字节数，如果未给定或为负则读取所有。
#lol英雄图.readline([size])  读取整行，包括 "\n" 字符。
#lol英雄图.readlines([sizeint])  读取所有行并返回列表，若给定sizeint>0，返回总和大约为sizeint字节的行, 实际读取值可能比 sizeint 较大, 因为需要填充缓冲区。
#lol英雄图.seek(offset[, whence])    设置文件当前位置
#lol英雄图.tell()    返回文件当前位置。
#lol英雄图.truncate([size])  从文件的首行首字符开始截断，截断文件为 size 个字符，无 size 表示从当前位置截断；截断之后后面的所有字符被删除，其中 Widnows 系统下的换行代表2个字符大小。
#lol英雄图.write(str)    将字符串写入文件，返回的是写入的字符长度。
#lol英雄图.writelines(sequence)  向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行符。



#with 语句
    #with语句使用的技术是一种称为上下文管理协议的技术
    #自动判断文件的作用域，自动关闭不再使用的打开的文件句柄

# with open(r'test01.txt','r') as f  :
#     pass
#下面语句块开始对文件f进行操作
#在本模块中不需要再使用close关闭文件f

#with案例
# with open(r'test01.txt','r') as g :
#     #按行读取内容
#     strline = g.readline()
#     #此结构保证能够完整读取文件直到结束
#     while strline:
#         print(strline)
#         strline = g.readline()

# #list能用打开的文件作为参数，把文件内每一行内容作为一个元素
# with open(r'test01.txt','r') as  h:
#     #以打开的文件h作为参数创建列表
#     l = list(h)
#     for line in l :
#         print(line)

#read   读取某个文件    read后面的参数填几  他就打印几个字符  如果没有指定他就从头打到尾
# with open(r'test01.txt','r') as  j:
#     strchar = j.read()
#     print(len(strchar))
#     print(strchar)


#seek（offset,from）      #移动文件的读取位置，也叫读取指针
# from的取值范围
    #0 :  从文件头开始偏移
    #1 ：从文件当前位置开始偏移
    #2 ：从文件末尾开始偏移
#移动的单位是字节（byte）
#一个汉字由若干个字节构成
#返回文件只针对当前位置
# with open(r'test01.txt','r') as f :
#     #seek是移动单位是字节
#     f.seek(6,0)#从第6个字节开始读取
#     strchar = f.read()          ###注意一个汉字可能是好几个字节组成，不能从某个汉字的第二个字节开始 因为打印不出来
#     print(strchar)

##tell函数：用来显示文件读写指针的当前位置
# with open(r'test01.txt','r') as f :
#     strchar = f.read(3)
#     pos = f.tell()
    # while strchar :         #结果说明tell返回数字单位是byte        read是以字符为单位
    #     print(pos)
    #     print(strchar)
    #     strchar = f.read(3)
    #     pos = f.tell()


##write案例
#向文件追加一句话
#a代表最佳方式打开
# with open(r'test01.txt','a') as f :
    # f.write('没有什么是，\n可以一直顺心的')













